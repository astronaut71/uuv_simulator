// Generated by gencpp from file uuv_plume_msgs/GetNumParticlesResponse.msg
// DO NOT EDIT!


#ifndef UUV_PLUME_MSGS_MESSAGE_GETNUMPARTICLESRESPONSE_H
#define UUV_PLUME_MSGS_MESSAGE_GETNUMPARTICLESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_plume_msgs
{
template <class ContainerAllocator>
struct GetNumParticlesResponse_
{
  typedef GetNumParticlesResponse_<ContainerAllocator> Type;

  GetNumParticlesResponse_()
    : num_particles(0)  {
    }
  GetNumParticlesResponse_(const ContainerAllocator& _alloc)
    : num_particles(0)  {
  (void)_alloc;
    }



   typedef int32_t _num_particles_type;
  _num_particles_type num_particles;





  typedef boost::shared_ptr< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetNumParticlesResponse_

typedef ::uuv_plume_msgs::GetNumParticlesResponse_<std::allocator<void> > GetNumParticlesResponse;

typedef boost::shared_ptr< ::uuv_plume_msgs::GetNumParticlesResponse > GetNumParticlesResponsePtr;
typedef boost::shared_ptr< ::uuv_plume_msgs::GetNumParticlesResponse const> GetNumParticlesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.num_particles == rhs.num_particles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_plume_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3e7a05396001d2e02f04b13547a3da2";
  }

  static const char* value(const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3e7a05396001d2eULL;
  static const uint64_t static_value2 = 0x02f04b13547a3da2ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_plume_msgs/GetNumParticlesResponse";
  }

  static const char* value(const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num_particles\n"
"\n"
;
  }

  static const char* value(const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_particles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetNumParticlesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_plume_msgs::GetNumParticlesResponse_<ContainerAllocator>& v)
  {
    s << indent << "num_particles: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_particles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_PLUME_MSGS_MESSAGE_GETNUMPARTICLESRESPONSE_H
