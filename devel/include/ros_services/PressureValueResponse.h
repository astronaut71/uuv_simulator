// Generated by gencpp from file ros_services/PressureValueResponse.msg
// DO NOT EDIT!


#ifndef ROS_SERVICES_MESSAGE_PRESSUREVALUERESPONSE_H
#define ROS_SERVICES_MESSAGE_PRESSUREVALUERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_services
{
template <class ContainerAllocator>
struct PressureValueResponse_
{
  typedef PressureValueResponse_<ContainerAllocator> Type;

  PressureValueResponse_()
    : current_pressure_s(0.0)
    , success(false)  {
    }
  PressureValueResponse_(const ContainerAllocator& _alloc)
    : current_pressure_s(0.0)
    , success(false)  {
  (void)_alloc;
    }



   typedef double _current_pressure_s_type;
  _current_pressure_s_type current_pressure_s;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::ros_services::PressureValueResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_services::PressureValueResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PressureValueResponse_

typedef ::ros_services::PressureValueResponse_<std::allocator<void> > PressureValueResponse;

typedef boost::shared_ptr< ::ros_services::PressureValueResponse > PressureValueResponsePtr;
typedef boost::shared_ptr< ::ros_services::PressureValueResponse const> PressureValueResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_services::PressureValueResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_services::PressureValueResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_services::PressureValueResponse_<ContainerAllocator1> & lhs, const ::ros_services::PressureValueResponse_<ContainerAllocator2> & rhs)
{
  return lhs.current_pressure_s == rhs.current_pressure_s &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_services::PressureValueResponse_<ContainerAllocator1> & lhs, const ::ros_services::PressureValueResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_services

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_services::PressureValueResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_services::PressureValueResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_services::PressureValueResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_services::PressureValueResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_services::PressureValueResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_services::PressureValueResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_services::PressureValueResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adf14e9fc94a6102e1b6e162ec900512";
  }

  static const char* value(const ::ros_services::PressureValueResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadf14e9fc94a6102ULL;
  static const uint64_t static_value2 = 0xe1b6e162ec900512ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_services::PressureValueResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_services/PressureValueResponse";
  }

  static const char* value(const ::ros_services::PressureValueResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_services::PressureValueResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 current_pressure_s\n"
"bool success\n"
"\n"
"\n"
;
  }

  static const char* value(const ::ros_services::PressureValueResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_services::PressureValueResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_pressure_s);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PressureValueResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_services::PressureValueResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_services::PressureValueResponse_<ContainerAllocator>& v)
  {
    s << indent << "current_pressure_s: ";
    Printer<double>::stream(s, indent + "  ", v.current_pressure_s);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SERVICES_MESSAGE_PRESSUREVALUERESPONSE_H
