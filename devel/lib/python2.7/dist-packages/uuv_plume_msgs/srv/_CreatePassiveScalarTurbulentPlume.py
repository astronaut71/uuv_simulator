# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uuv_plume_msgs/CreatePassiveScalarTurbulentPlumeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CreatePassiveScalarTurbulentPlumeRequest(genpy.Message):
  _md5sum = "3a1ed1b318bcdeacf878e86ddcf7ed2c"
  _type = "uuv_plume_msgs/CreatePassiveScalarTurbulentPlumeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2016 The UUV Simulator Authors.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

geometry_msgs/Vector3 turbulent_diffusion_coefficients
geometry_msgs/Point source
float64 buoyancy_flux
float64 stability_param
int32 n_points
int32 max_particles_per_iter
float64 x_min
float64 x_max
float64 y_min
float64 y_max
float64 z_min
float64 z_max
float64 max_life_time

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['turbulent_diffusion_coefficients','source','buoyancy_flux','stability_param','n_points','max_particles_per_iter','x_min','x_max','y_min','y_max','z_min','z_max','max_life_time']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Point','float64','float64','int32','int32','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       turbulent_diffusion_coefficients,source,buoyancy_flux,stability_param,n_points,max_particles_per_iter,x_min,x_max,y_min,y_max,z_min,z_max,max_life_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CreatePassiveScalarTurbulentPlumeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.turbulent_diffusion_coefficients is None:
        self.turbulent_diffusion_coefficients = geometry_msgs.msg.Vector3()
      if self.source is None:
        self.source = geometry_msgs.msg.Point()
      if self.buoyancy_flux is None:
        self.buoyancy_flux = 0.
      if self.stability_param is None:
        self.stability_param = 0.
      if self.n_points is None:
        self.n_points = 0
      if self.max_particles_per_iter is None:
        self.max_particles_per_iter = 0
      if self.x_min is None:
        self.x_min = 0.
      if self.x_max is None:
        self.x_max = 0.
      if self.y_min is None:
        self.y_min = 0.
      if self.y_max is None:
        self.y_max = 0.
      if self.z_min is None:
        self.z_min = 0.
      if self.z_max is None:
        self.z_max = 0.
      if self.max_life_time is None:
        self.max_life_time = 0.
    else:
      self.turbulent_diffusion_coefficients = geometry_msgs.msg.Vector3()
      self.source = geometry_msgs.msg.Point()
      self.buoyancy_flux = 0.
      self.stability_param = 0.
      self.n_points = 0
      self.max_particles_per_iter = 0
      self.x_min = 0.
      self.x_max = 0.
      self.y_min = 0.
      self.y_max = 0.
      self.z_min = 0.
      self.z_max = 0.
      self.max_life_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d2i7d().pack(_x.turbulent_diffusion_coefficients.x, _x.turbulent_diffusion_coefficients.y, _x.turbulent_diffusion_coefficients.z, _x.source.x, _x.source.y, _x.source.z, _x.buoyancy_flux, _x.stability_param, _x.n_points, _x.max_particles_per_iter, _x.x_min, _x.x_max, _x.y_min, _x.y_max, _x.z_min, _x.z_max, _x.max_life_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.turbulent_diffusion_coefficients is None:
        self.turbulent_diffusion_coefficients = geometry_msgs.msg.Vector3()
      if self.source is None:
        self.source = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.turbulent_diffusion_coefficients.x, _x.turbulent_diffusion_coefficients.y, _x.turbulent_diffusion_coefficients.z, _x.source.x, _x.source.y, _x.source.z, _x.buoyancy_flux, _x.stability_param, _x.n_points, _x.max_particles_per_iter, _x.x_min, _x.x_max, _x.y_min, _x.y_max, _x.z_min, _x.z_max, _x.max_life_time,) = _get_struct_8d2i7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d2i7d().pack(_x.turbulent_diffusion_coefficients.x, _x.turbulent_diffusion_coefficients.y, _x.turbulent_diffusion_coefficients.z, _x.source.x, _x.source.y, _x.source.z, _x.buoyancy_flux, _x.stability_param, _x.n_points, _x.max_particles_per_iter, _x.x_min, _x.x_max, _x.y_min, _x.y_max, _x.z_min, _x.z_max, _x.max_life_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.turbulent_diffusion_coefficients is None:
        self.turbulent_diffusion_coefficients = geometry_msgs.msg.Vector3()
      if self.source is None:
        self.source = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.turbulent_diffusion_coefficients.x, _x.turbulent_diffusion_coefficients.y, _x.turbulent_diffusion_coefficients.z, _x.source.x, _x.source.y, _x.source.z, _x.buoyancy_flux, _x.stability_param, _x.n_points, _x.max_particles_per_iter, _x.x_min, _x.x_max, _x.y_min, _x.y_max, _x.z_min, _x.z_max, _x.max_life_time,) = _get_struct_8d2i7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d2i7d = None
def _get_struct_8d2i7d():
    global _struct_8d2i7d
    if _struct_8d2i7d is None:
        _struct_8d2i7d = struct.Struct("<8d2i7d")
    return _struct_8d2i7d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uuv_plume_msgs/CreatePassiveScalarTurbulentPlumeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CreatePassiveScalarTurbulentPlumeResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "uuv_plume_msgs/CreatePassiveScalarTurbulentPlumeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CreatePassiveScalarTurbulentPlumeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class CreatePassiveScalarTurbulentPlume(object):
  _type          = 'uuv_plume_msgs/CreatePassiveScalarTurbulentPlume'
  _md5sum = 'f374842dc7a898751eeacdffd08129ce'
  _request_class  = CreatePassiveScalarTurbulentPlumeRequest
  _response_class = CreatePassiveScalarTurbulentPlumeResponse
