# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_services/SonarValueRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SonarValueRequest(genpy.Message):
  _md5sum = "172a968124eb1818322b971abb516fef"
  _type = "ros_services/SonarValueRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 current_angle_min_c
float32 current_angle_max_c
float32 current_angle_increment_c
float32 current_time_increment_c
float32 current_scan_time_c
float32 current_range_min_c
float32 current_range_max_c
"""
  __slots__ = ['current_angle_min_c','current_angle_max_c','current_angle_increment_c','current_time_increment_c','current_scan_time_c','current_range_min_c','current_range_max_c']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_angle_min_c,current_angle_max_c,current_angle_increment_c,current_time_increment_c,current_scan_time_c,current_range_min_c,current_range_max_c

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SonarValueRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_angle_min_c is None:
        self.current_angle_min_c = 0.
      if self.current_angle_max_c is None:
        self.current_angle_max_c = 0.
      if self.current_angle_increment_c is None:
        self.current_angle_increment_c = 0.
      if self.current_time_increment_c is None:
        self.current_time_increment_c = 0.
      if self.current_scan_time_c is None:
        self.current_scan_time_c = 0.
      if self.current_range_min_c is None:
        self.current_range_min_c = 0.
      if self.current_range_max_c is None:
        self.current_range_max_c = 0.
    else:
      self.current_angle_min_c = 0.
      self.current_angle_max_c = 0.
      self.current_angle_increment_c = 0.
      self.current_time_increment_c = 0.
      self.current_scan_time_c = 0.
      self.current_range_min_c = 0.
      self.current_range_max_c = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.current_angle_min_c, _x.current_angle_max_c, _x.current_angle_increment_c, _x.current_time_increment_c, _x.current_scan_time_c, _x.current_range_min_c, _x.current_range_max_c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.current_angle_min_c, _x.current_angle_max_c, _x.current_angle_increment_c, _x.current_time_increment_c, _x.current_scan_time_c, _x.current_range_min_c, _x.current_range_max_c,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.current_angle_min_c, _x.current_angle_max_c, _x.current_angle_increment_c, _x.current_time_increment_c, _x.current_scan_time_c, _x.current_range_min_c, _x.current_range_max_c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.current_angle_min_c, _x.current_angle_max_c, _x.current_angle_increment_c, _x.current_time_increment_c, _x.current_scan_time_c, _x.current_range_min_c, _x.current_range_max_c,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_services/SonarValueResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SonarValueResponse(genpy.Message):
  _md5sum = "9dec25f4e12492855bbfccd77fc79e87"
  _type = "ros_services/SonarValueResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 current_angle_min_s
float32 current_angle_max_s
float32 current_angle_increment_s
float32 current_time_increment_s
float32 current_scan_time_s
float32 current_range_min_s
float32 current_range_max_s
bool success



"""
  __slots__ = ['current_angle_min_s','current_angle_max_s','current_angle_increment_s','current_time_increment_s','current_scan_time_s','current_range_min_s','current_range_max_s','success']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_angle_min_s,current_angle_max_s,current_angle_increment_s,current_time_increment_s,current_scan_time_s,current_range_min_s,current_range_max_s,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SonarValueResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_angle_min_s is None:
        self.current_angle_min_s = 0.
      if self.current_angle_max_s is None:
        self.current_angle_max_s = 0.
      if self.current_angle_increment_s is None:
        self.current_angle_increment_s = 0.
      if self.current_time_increment_s is None:
        self.current_time_increment_s = 0.
      if self.current_scan_time_s is None:
        self.current_scan_time_s = 0.
      if self.current_range_min_s is None:
        self.current_range_min_s = 0.
      if self.current_range_max_s is None:
        self.current_range_max_s = 0.
      if self.success is None:
        self.success = False
    else:
      self.current_angle_min_s = 0.
      self.current_angle_max_s = 0.
      self.current_angle_increment_s = 0.
      self.current_time_increment_s = 0.
      self.current_scan_time_s = 0.
      self.current_range_min_s = 0.
      self.current_range_max_s = 0.
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7fB().pack(_x.current_angle_min_s, _x.current_angle_max_s, _x.current_angle_increment_s, _x.current_time_increment_s, _x.current_scan_time_s, _x.current_range_min_s, _x.current_range_max_s, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.current_angle_min_s, _x.current_angle_max_s, _x.current_angle_increment_s, _x.current_time_increment_s, _x.current_scan_time_s, _x.current_range_min_s, _x.current_range_max_s, _x.success,) = _get_struct_7fB().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7fB().pack(_x.current_angle_min_s, _x.current_angle_max_s, _x.current_angle_increment_s, _x.current_time_increment_s, _x.current_scan_time_s, _x.current_range_min_s, _x.current_range_max_s, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.current_angle_min_s, _x.current_angle_max_s, _x.current_angle_increment_s, _x.current_time_increment_s, _x.current_scan_time_s, _x.current_range_min_s, _x.current_range_max_s, _x.success,) = _get_struct_7fB().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fB = None
def _get_struct_7fB():
    global _struct_7fB
    if _struct_7fB is None:
        _struct_7fB = struct.Struct("<7fB")
    return _struct_7fB
class SonarValue(object):
  _type          = 'ros_services/SonarValue'
  _md5sum = '531b870d85b27f9cb775cebf182532b1'
  _request_class  = SonarValueRequest
  _response_class = SonarValueResponse
