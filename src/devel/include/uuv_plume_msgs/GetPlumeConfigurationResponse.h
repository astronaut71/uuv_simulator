// Generated by gencpp from file uuv_plume_msgs/GetPlumeConfigurationResponse.msg
// DO NOT EDIT!


#ifndef UUV_PLUME_MSGS_MESSAGE_GETPLUMECONFIGURATIONRESPONSE_H
#define UUV_PLUME_MSGS_MESSAGE_GETPLUMECONFIGURATIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace uuv_plume_msgs
{
template <class ContainerAllocator>
struct GetPlumeConfigurationResponse_
{
  typedef GetPlumeConfigurationResponse_<ContainerAllocator> Type;

  GetPlumeConfigurationResponse_()
    : model_name()
    , n_points(0)
    , max_particles_per_iter(0)
    , source()
    , x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
    }
  GetPlumeConfigurationResponse_(const ContainerAllocator& _alloc)
    : model_name(_alloc)
    , n_points(0)
    , max_particles_per_iter(0)
    , source(_alloc)
    , x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef int32_t _n_points_type;
  _n_points_type n_points;

   typedef int32_t _max_particles_per_iter_type;
  _max_particles_per_iter_type max_particles_per_iter;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _source_type;
  _source_type source;

   typedef double _x_min_type;
  _x_min_type x_min;

   typedef double _x_max_type;
  _x_max_type x_max;

   typedef double _y_min_type;
  _y_min_type y_min;

   typedef double _y_max_type;
  _y_max_type y_max;

   typedef double _z_min_type;
  _z_min_type z_min;

   typedef double _z_max_type;
  _z_max_type z_max;





  typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPlumeConfigurationResponse_

typedef ::uuv_plume_msgs::GetPlumeConfigurationResponse_<std::allocator<void> > GetPlumeConfigurationResponse;

typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeConfigurationResponse > GetPlumeConfigurationResponsePtr;
typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeConfigurationResponse const> GetPlumeConfigurationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.model_name == rhs.model_name &&
    lhs.n_points == rhs.n_points &&
    lhs.max_particles_per_iter == rhs.max_particles_per_iter &&
    lhs.source == rhs.source &&
    lhs.x_min == rhs.x_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_min == rhs.y_min &&
    lhs.y_max == rhs.y_max &&
    lhs.z_min == rhs.z_min &&
    lhs.z_max == rhs.z_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_plume_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb1615b61ec9b80c7981906c8ffbab07";
  }

  static const char* value(const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb1615b61ec9b80cULL;
  static const uint64_t static_value2 = 0x7981906c8ffbab07ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_plume_msgs/GetPlumeConfigurationResponse";
  }

  static const char* value(const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model_name\n"
"int32 n_points\n"
"int32 max_particles_per_iter\n"
"geometry_msgs/Point source\n"
"float64 x_min\n"
"float64 x_max\n"
"float64 y_min\n"
"float64 y_max\n"
"float64 z_min\n"
"float64 z_max\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_name);
      stream.next(m.n_points);
      stream.next(m.max_particles_per_iter);
      stream.next(m.source);
      stream.next(m.x_min);
      stream.next(m.x_max);
      stream.next(m.y_min);
      stream.next(m.y_max);
      stream.next(m.z_min);
      stream.next(m.z_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPlumeConfigurationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_plume_msgs::GetPlumeConfigurationResponse_<ContainerAllocator>& v)
  {
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "n_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_points);
    s << indent << "max_particles_per_iter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_particles_per_iter);
    s << indent << "source: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.source);
    s << indent << "x_min: ";
    Printer<double>::stream(s, indent + "  ", v.x_min);
    s << indent << "x_max: ";
    Printer<double>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_min: ";
    Printer<double>::stream(s, indent + "  ", v.y_min);
    s << indent << "y_max: ";
    Printer<double>::stream(s, indent + "  ", v.y_max);
    s << indent << "z_min: ";
    Printer<double>::stream(s, indent + "  ", v.z_min);
    s << indent << "z_max: ";
    Printer<double>::stream(s, indent + "  ", v.z_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_PLUME_MSGS_MESSAGE_GETPLUMECONFIGURATIONRESPONSE_H
