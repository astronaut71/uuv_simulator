// Generated by gencpp from file uuv_plume_msgs/ParticleConcentration.msg
// DO NOT EDIT!


#ifndef UUV_PLUME_MSGS_MESSAGE_PARTICLECONCENTRATION_H
#define UUV_PLUME_MSGS_MESSAGE_PARTICLECONCENTRATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geographic_msgs/GeoPoint.h>

namespace uuv_plume_msgs
{
template <class ContainerAllocator>
struct ParticleConcentration_
{
  typedef ParticleConcentration_<ContainerAllocator> Type;

  ParticleConcentration_()
    : header()
    , position()
    , geo_point()
    , concentration(0.0)  {
    }
  ParticleConcentration_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position(_alloc)
    , geo_point(_alloc)
    , concentration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _geo_point_type;
  _geo_point_type geo_point;

   typedef double _concentration_type;
  _concentration_type concentration;





  typedef boost::shared_ptr< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> const> ConstPtr;

}; // struct ParticleConcentration_

typedef ::uuv_plume_msgs::ParticleConcentration_<std::allocator<void> > ParticleConcentration;

typedef boost::shared_ptr< ::uuv_plume_msgs::ParticleConcentration > ParticleConcentrationPtr;
typedef boost::shared_ptr< ::uuv_plume_msgs::ParticleConcentration const> ParticleConcentrationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position == rhs.position &&
    lhs.geo_point == rhs.geo_point &&
    lhs.concentration == rhs.concentration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_plume_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "018ff018a5cc3c75eb3684e0da416577";
  }

  static const char* value(const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x018ff018a5cc3c75ULL;
  static const uint64_t static_value2 = 0xeb3684e0da416577ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_plume_msgs/ParticleConcentration";
  }

  static const char* value(const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2016 The UUV Simulator Authors.\n"
"# All rights reserved.\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#     http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"Header header\n"
"# Sensor link position wrt the reference frame\n"
"geometry_msgs/Vector3 position\n"
"# WGS84 coordinates (the altitude component corresponds to -1 * depth)\n"
"geographic_msgs/GeoPoint geo_point\n"
"# Particle concentration\n"
"float64 concentration\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position);
      stream.next(m.geo_point);
      stream.next(m.concentration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParticleConcentration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_plume_msgs::ParticleConcentration_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "geo_point: ";
    s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_point);
    s << indent << "concentration: ";
    Printer<double>::stream(s, indent + "  ", v.concentration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_PLUME_MSGS_MESSAGE_PARTICLECONCENTRATION_H
