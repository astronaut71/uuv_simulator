// Generated by gencpp from file uuv_plume_msgs/GetPlumeSourcePositionResponse.msg
// DO NOT EDIT!


#ifndef UUV_PLUME_MSGS_MESSAGE_GETPLUMESOURCEPOSITIONRESPONSE_H
#define UUV_PLUME_MSGS_MESSAGE_GETPLUMESOURCEPOSITIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace uuv_plume_msgs
{
template <class ContainerAllocator>
struct GetPlumeSourcePositionResponse_
{
  typedef GetPlumeSourcePositionResponse_<ContainerAllocator> Type;

  GetPlumeSourcePositionResponse_()
    : source()  {
    }
  GetPlumeSourcePositionResponse_(const ContainerAllocator& _alloc)
    : source(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _source_type;
  _source_type source;





  typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPlumeSourcePositionResponse_

typedef ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<std::allocator<void> > GetPlumeSourcePositionResponse;

typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeSourcePositionResponse > GetPlumeSourcePositionResponsePtr;
typedef boost::shared_ptr< ::uuv_plume_msgs::GetPlumeSourcePositionResponse const> GetPlumeSourcePositionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_plume_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74e696b4bb2fd623e3aef7e08928baee";
  }

  static const char* value(const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74e696b4bb2fd623ULL;
  static const uint64_t static_value2 = 0xe3aef7e08928baeeULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_plume_msgs/GetPlumeSourcePositionResponse";
  }

  static const char* value(const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point source\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPlumeSourcePositionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_plume_msgs::GetPlumeSourcePositionResponse_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_PLUME_MSGS_MESSAGE_GETPLUMESOURCEPOSITIONRESPONSE_H
