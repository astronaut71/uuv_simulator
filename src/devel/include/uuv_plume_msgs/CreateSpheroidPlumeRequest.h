// Generated by gencpp from file uuv_plume_msgs/CreateSpheroidPlumeRequest.msg
// DO NOT EDIT!


#ifndef UUV_PLUME_MSGS_MESSAGE_CREATESPHEROIDPLUMEREQUEST_H
#define UUV_PLUME_MSGS_MESSAGE_CREATESPHEROIDPLUMEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace uuv_plume_msgs
{
template <class ContainerAllocator>
struct CreateSpheroidPlumeRequest_
{
  typedef CreateSpheroidPlumeRequest_<ContainerAllocator> Type;

  CreateSpheroidPlumeRequest_()
    : source()
    , orientation()
    , n_points(0)
    , a(0.0)
    , c(0.0)
    , x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
    }
  CreateSpheroidPlumeRequest_(const ContainerAllocator& _alloc)
    : source(_alloc)
    , orientation(_alloc)
    , n_points(0)
    , a(0.0)
    , c(0.0)
    , x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _source_type;
  _source_type source;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef int32_t _n_points_type;
  _n_points_type n_points;

   typedef float _a_type;
  _a_type a;

   typedef float _c_type;
  _c_type c;

   typedef double _x_min_type;
  _x_min_type x_min;

   typedef double _x_max_type;
  _x_max_type x_max;

   typedef double _y_min_type;
  _y_min_type y_min;

   typedef double _y_max_type;
  _y_max_type y_max;

   typedef double _z_min_type;
  _z_min_type z_min;

   typedef double _z_max_type;
  _z_max_type z_max;





  typedef boost::shared_ptr< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CreateSpheroidPlumeRequest_

typedef ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<std::allocator<void> > CreateSpheroidPlumeRequest;

typedef boost::shared_ptr< ::uuv_plume_msgs::CreateSpheroidPlumeRequest > CreateSpheroidPlumeRequestPtr;
typedef boost::shared_ptr< ::uuv_plume_msgs::CreateSpheroidPlumeRequest const> CreateSpheroidPlumeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source &&
    lhs.orientation == rhs.orientation &&
    lhs.n_points == rhs.n_points &&
    lhs.a == rhs.a &&
    lhs.c == rhs.c &&
    lhs.x_min == rhs.x_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_min == rhs.y_min &&
    lhs.y_max == rhs.y_max &&
    lhs.z_min == rhs.z_min &&
    lhs.z_max == rhs.z_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator1> & lhs, const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_plume_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db32e79c6acbda79b2d8be3ff5b7d146";
  }

  static const char* value(const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb32e79c6acbda79ULL;
  static const uint64_t static_value2 = 0xb2d8be3ff5b7d146ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_plume_msgs/CreateSpheroidPlumeRequest";
  }

  static const char* value(const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2016 The UUV Simulator Authors.\n"
"# All rights reserved.\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#     http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"geometry_msgs/Point source\n"
"geometry_msgs/Quaternion orientation\n"
"int32 n_points\n"
"float32 a\n"
"float32 c\n"
"float64 x_min\n"
"float64 x_max\n"
"float64 y_min\n"
"float64 y_max\n"
"float64 z_min\n"
"float64 z_max\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.orientation);
      stream.next(m.n_points);
      stream.next(m.a);
      stream.next(m.c);
      stream.next(m.x_min);
      stream.next(m.x_max);
      stream.next(m.y_min);
      stream.next(m.y_max);
      stream.next(m.z_min);
      stream.next(m.z_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CreateSpheroidPlumeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_plume_msgs::CreateSpheroidPlumeRequest_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.source);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "n_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_points);
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "c: ";
    Printer<float>::stream(s, indent + "  ", v.c);
    s << indent << "x_min: ";
    Printer<double>::stream(s, indent + "  ", v.x_min);
    s << indent << "x_max: ";
    Printer<double>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_min: ";
    Printer<double>::stream(s, indent + "  ", v.y_min);
    s << indent << "y_max: ";
    Printer<double>::stream(s, indent + "  ", v.y_max);
    s << indent << "z_min: ";
    Printer<double>::stream(s, indent + "  ", v.z_min);
    s << indent << "z_max: ";
    Printer<double>::stream(s, indent + "  ", v.z_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_PLUME_MSGS_MESSAGE_CREATESPHEROIDPLUMEREQUEST_H
