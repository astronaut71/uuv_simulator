# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_services/ImuValueRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ImuValueRequest(genpy.Message):
  _md5sum = "ba80b4a22f2f77611473d2d4f470fb77"
  _type = "ros_services/ImuValueRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 current_x_orientation_c
float64 current_y_orientation_c
float64 current_z_orientation_c
float64 current_w_orientation_c
float64 current_x_angular_velocity_c
float64 current_y_angular_velocity_c
float64 current_z_angular_velocity_c
float64 current_x_linear_acceleration_c
float64 current_y_linear_acceleration_c
float64 current_z_linear_acceleration_c
"""
  __slots__ = ['current_x_orientation_c','current_y_orientation_c','current_z_orientation_c','current_w_orientation_c','current_x_angular_velocity_c','current_y_angular_velocity_c','current_z_angular_velocity_c','current_x_linear_acceleration_c','current_y_linear_acceleration_c','current_z_linear_acceleration_c']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_x_orientation_c,current_y_orientation_c,current_z_orientation_c,current_w_orientation_c,current_x_angular_velocity_c,current_y_angular_velocity_c,current_z_angular_velocity_c,current_x_linear_acceleration_c,current_y_linear_acceleration_c,current_z_linear_acceleration_c

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuValueRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_x_orientation_c is None:
        self.current_x_orientation_c = 0.
      if self.current_y_orientation_c is None:
        self.current_y_orientation_c = 0.
      if self.current_z_orientation_c is None:
        self.current_z_orientation_c = 0.
      if self.current_w_orientation_c is None:
        self.current_w_orientation_c = 0.
      if self.current_x_angular_velocity_c is None:
        self.current_x_angular_velocity_c = 0.
      if self.current_y_angular_velocity_c is None:
        self.current_y_angular_velocity_c = 0.
      if self.current_z_angular_velocity_c is None:
        self.current_z_angular_velocity_c = 0.
      if self.current_x_linear_acceleration_c is None:
        self.current_x_linear_acceleration_c = 0.
      if self.current_y_linear_acceleration_c is None:
        self.current_y_linear_acceleration_c = 0.
      if self.current_z_linear_acceleration_c is None:
        self.current_z_linear_acceleration_c = 0.
    else:
      self.current_x_orientation_c = 0.
      self.current_y_orientation_c = 0.
      self.current_z_orientation_c = 0.
      self.current_w_orientation_c = 0.
      self.current_x_angular_velocity_c = 0.
      self.current_y_angular_velocity_c = 0.
      self.current_z_angular_velocity_c = 0.
      self.current_x_linear_acceleration_c = 0.
      self.current_y_linear_acceleration_c = 0.
      self.current_z_linear_acceleration_c = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10d().pack(_x.current_x_orientation_c, _x.current_y_orientation_c, _x.current_z_orientation_c, _x.current_w_orientation_c, _x.current_x_angular_velocity_c, _x.current_y_angular_velocity_c, _x.current_z_angular_velocity_c, _x.current_x_linear_acceleration_c, _x.current_y_linear_acceleration_c, _x.current_z_linear_acceleration_c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.current_x_orientation_c, _x.current_y_orientation_c, _x.current_z_orientation_c, _x.current_w_orientation_c, _x.current_x_angular_velocity_c, _x.current_y_angular_velocity_c, _x.current_z_angular_velocity_c, _x.current_x_linear_acceleration_c, _x.current_y_linear_acceleration_c, _x.current_z_linear_acceleration_c,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10d().pack(_x.current_x_orientation_c, _x.current_y_orientation_c, _x.current_z_orientation_c, _x.current_w_orientation_c, _x.current_x_angular_velocity_c, _x.current_y_angular_velocity_c, _x.current_z_angular_velocity_c, _x.current_x_linear_acceleration_c, _x.current_y_linear_acceleration_c, _x.current_z_linear_acceleration_c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.current_x_orientation_c, _x.current_y_orientation_c, _x.current_z_orientation_c, _x.current_w_orientation_c, _x.current_x_angular_velocity_c, _x.current_y_angular_velocity_c, _x.current_z_angular_velocity_c, _x.current_x_linear_acceleration_c, _x.current_y_linear_acceleration_c, _x.current_z_linear_acceleration_c,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_services/ImuValueResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ImuValueResponse(genpy.Message):
  _md5sum = "cf57795100e7d925db9b4cb90363b047"
  _type = "ros_services/ImuValueResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 current_x_orientation_s
float64 current_y_orientation_s
float64 current_z_orientation_s
float64 current_w_orientation_s
float64 current_x_angular_velocity_s
float64 current_y_angular_velocity_s
float64 current_z_angular_velocity_s
float64 current_x_linear_acceleration_s
float64 current_y_linear_acceleration_s
float64 current_z_linear_acceleration_s
bool success


"""
  __slots__ = ['current_x_orientation_s','current_y_orientation_s','current_z_orientation_s','current_w_orientation_s','current_x_angular_velocity_s','current_y_angular_velocity_s','current_z_angular_velocity_s','current_x_linear_acceleration_s','current_y_linear_acceleration_s','current_z_linear_acceleration_s','success']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_x_orientation_s,current_y_orientation_s,current_z_orientation_s,current_w_orientation_s,current_x_angular_velocity_s,current_y_angular_velocity_s,current_z_angular_velocity_s,current_x_linear_acceleration_s,current_y_linear_acceleration_s,current_z_linear_acceleration_s,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuValueResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_x_orientation_s is None:
        self.current_x_orientation_s = 0.
      if self.current_y_orientation_s is None:
        self.current_y_orientation_s = 0.
      if self.current_z_orientation_s is None:
        self.current_z_orientation_s = 0.
      if self.current_w_orientation_s is None:
        self.current_w_orientation_s = 0.
      if self.current_x_angular_velocity_s is None:
        self.current_x_angular_velocity_s = 0.
      if self.current_y_angular_velocity_s is None:
        self.current_y_angular_velocity_s = 0.
      if self.current_z_angular_velocity_s is None:
        self.current_z_angular_velocity_s = 0.
      if self.current_x_linear_acceleration_s is None:
        self.current_x_linear_acceleration_s = 0.
      if self.current_y_linear_acceleration_s is None:
        self.current_y_linear_acceleration_s = 0.
      if self.current_z_linear_acceleration_s is None:
        self.current_z_linear_acceleration_s = 0.
      if self.success is None:
        self.success = False
    else:
      self.current_x_orientation_s = 0.
      self.current_y_orientation_s = 0.
      self.current_z_orientation_s = 0.
      self.current_w_orientation_s = 0.
      self.current_x_angular_velocity_s = 0.
      self.current_y_angular_velocity_s = 0.
      self.current_z_angular_velocity_s = 0.
      self.current_x_linear_acceleration_s = 0.
      self.current_y_linear_acceleration_s = 0.
      self.current_z_linear_acceleration_s = 0.
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10dB().pack(_x.current_x_orientation_s, _x.current_y_orientation_s, _x.current_z_orientation_s, _x.current_w_orientation_s, _x.current_x_angular_velocity_s, _x.current_y_angular_velocity_s, _x.current_z_angular_velocity_s, _x.current_x_linear_acceleration_s, _x.current_y_linear_acceleration_s, _x.current_z_linear_acceleration_s, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 81
      (_x.current_x_orientation_s, _x.current_y_orientation_s, _x.current_z_orientation_s, _x.current_w_orientation_s, _x.current_x_angular_velocity_s, _x.current_y_angular_velocity_s, _x.current_z_angular_velocity_s, _x.current_x_linear_acceleration_s, _x.current_y_linear_acceleration_s, _x.current_z_linear_acceleration_s, _x.success,) = _get_struct_10dB().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10dB().pack(_x.current_x_orientation_s, _x.current_y_orientation_s, _x.current_z_orientation_s, _x.current_w_orientation_s, _x.current_x_angular_velocity_s, _x.current_y_angular_velocity_s, _x.current_z_angular_velocity_s, _x.current_x_linear_acceleration_s, _x.current_y_linear_acceleration_s, _x.current_z_linear_acceleration_s, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 81
      (_x.current_x_orientation_s, _x.current_y_orientation_s, _x.current_z_orientation_s, _x.current_w_orientation_s, _x.current_x_angular_velocity_s, _x.current_y_angular_velocity_s, _x.current_z_angular_velocity_s, _x.current_x_linear_acceleration_s, _x.current_y_linear_acceleration_s, _x.current_z_linear_acceleration_s, _x.success,) = _get_struct_10dB().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10dB = None
def _get_struct_10dB():
    global _struct_10dB
    if _struct_10dB is None:
        _struct_10dB = struct.Struct("<10dB")
    return _struct_10dB
class ImuValue(object):
  _type          = 'ros_services/ImuValue'
  _md5sum = 'd594bb3c4eeaf0325c0b0e4feeca4c15'
  _request_class  = ImuValueRequest
  _response_class = ImuValueResponse
